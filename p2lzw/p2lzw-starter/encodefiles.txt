typedef struct Storage {
    int previous_index;          // For it's empty
    char character;              // Character in this entry
    int symbol_code;             // Code for the (previous_index, character) pair
    struct Storage *next;        
} DictStorage; 

e.g.   prefix  previous_index   character     symbol_code
"AB"     A            65             B             256   


Archive: 

// Don't use 
void make_list_to_retain() {
    int retained_list_index = 0;

    for (int i = 0; i < HASH_TABLE_SIZE; i++) {
        DictStorage *current = hashTable[i];
        while (current != NULL) {
            int is_one_char_str = (current->previous_index == EMPTY);
            int is_prefix = 0;

            // Check if this entry is used as a prefix by any other entry
            for (int j = 0; j < HASH_TABLE_SIZE; j++) {
                DictStorage *next_storage = hashTable[j];
                while (next_storage != NULL) {
                    if (next_storage->previous_index == current->symbol_code) {
                        is_prefix = 1;
                        break;
                    }
                    next_storage = next_storage->next;
                }
                if (is_prefix) break;  // Exit outer loop 

            if (is_one_char_str || is_prefix) {
                current->retained = 1;                   
                retained_list[retained_list_index++] = current;  
            } else {
                current->retained = 0;  
            }
            current = current->next;
        }
    }
}